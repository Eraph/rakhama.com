<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Professional Development on Garcia&#39;s Guide to the Galaxy</title>
    <link>https://rakhama.com/series/professional-development/</link>
    <description>Recent content in Professional Development on Garcia&#39;s Guide to the Galaxy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Apr 2023 15:44:33 +1000</lastBuildDate>
    
	<atom:link href="https://rakhama.com/series/professional-development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fluxor for Dummies</title>
      <link>https://rakhama.com/posts/fluxor-for-dummies/</link>
      <pubDate>Thu, 06 Apr 2023 15:44:33 +1000</pubDate>
      
      <guid>https://rakhama.com/posts/fluxor-for-dummies/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/mrpmorris/Fluxor&#34;&gt;Fluxor&lt;/a&gt; is a Flux implementation for Blazor in the vein of Redux. It is a state management system designed for larger software systems that encourages immutability of state, pure functions and clean separation of code. Given my fairly basic understanding of the Flux pattern I thought it would be valuable to document what it is at a high level and what&amp;rsquo;s required when using Fluxor to implement the various concepts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blazor With MVVM</title>
      <link>https://rakhama.com/posts/blazor-with-mvvm/</link>
      <pubDate>Wed, 05 Apr 2023 14:34:41 +1000</pubDate>
      
      <guid>https://rakhama.com/posts/blazor-with-mvvm/</guid>
      <description>&lt;p&gt;MVVM is a development pattern that has been around for a while now. It was designed to facilitate the development of WPF applications for Windows and is still used for the likes of &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/architecture/maui/mvvm&#34;&gt;Maui&lt;/a&gt; apps. I reckon it has a place in Blazor apps as a neat way to separate view from logic, and as a sort of volatile state management for when you don&amp;rsquo;t want state to persist between pages.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debug Server Hosted Blazor Web Assembly in VS Code</title>
      <link>https://rakhama.com/posts/debug-server-hosted-blazor-wasm/</link>
      <pubDate>Tue, 04 Apr 2023 16:20:25 +1000</pubDate>
      
      <guid>https://rakhama.com/posts/debug-server-hosted-blazor-wasm/</guid>
      <description>&lt;p&gt;A published Blazor WebAssembly instance is just a collection of files that can be loaded into a browser. If these files are hosted on the API, running the API means the UI is running as well, probably from the same address. In this case it&amp;rsquo;s a little different to debug compared to launching it standalone, but not any more complicated.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>