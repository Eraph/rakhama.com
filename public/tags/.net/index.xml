<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.net on Garcia&#39;s Guide to the Galaxy</title>
    <link>https://rakhama.com/tags/.net/</link>
    <description>Recent content in .net on Garcia&#39;s Guide to the Galaxy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Jun 2024 10:15:01 +1000</lastBuildDate><atom:link href="https://rakhama.com/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deep Cell</title>
      <link>https://rakhama.com/projects/deep-cell/</link>
      <pubDate>Fri, 21 Jun 2024 10:15:01 +1000</pubDate>
      
      <guid>https://rakhama.com/projects/deep-cell/</guid>
      <description>&lt;p&gt;Go big or go home! I&amp;rsquo;ve been working on and off this project for nearly ten years. Originally developed in Unity, I&amp;rsquo;ve moved to &lt;a href=&#34;https://rakhama.com/series/godot&#34;&gt;Godot&lt;/a&gt; because I&amp;rsquo;m an Open Source shill.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s not much here yet I&amp;rsquo;m afraid, but I hope to write more about this soon.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Run a Blazor Web Application as Maui Mobile App</title>
      <link>https://rakhama.com/posts/run-blazor-web-application-as-maui-mobile-app/</link>
      <pubDate>Thu, 09 Nov 2023 14:20:14 +1000</pubDate>
      
      <guid>https://rakhama.com/posts/run-blazor-web-application-as-maui-mobile-app/</guid>
      <description>&lt;p&gt;I took some time to investigate developing a MAUI mobile app that shares business logic with a Blazor web app by way of ViewModels and the like. What I discovered was that MAUI and XAML is a pretty cumbersome framework. My colleague Kael &lt;a href=&#34;https://www.kaels-kabbage.com/posts/cross-platform-options-a-very-shallow-exploration/#maui-blazor-hybrid&#34;&gt;gave me some insight&lt;/a&gt; on the possibility of building a Blazor app and running that as a MAUI app. After looking into it in more detail I came to the conclusion that having a single application with multiple deployment targets is a more practical approach to cross-platform development. This article serves as a guide to developing a single application that can be deployed as both a website and an Android app. Of course there are a few platform specific things to look out for but they&amp;rsquo;re easily handled as I will demonstrate in this post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fluxor for Dummies</title>
      <link>https://rakhama.com/posts/fluxor-for-dummies/</link>
      <pubDate>Thu, 06 Apr 2023 15:44:33 +1000</pubDate>
      
      <guid>https://rakhama.com/posts/fluxor-for-dummies/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/mrpmorris/Fluxor&#34;&gt;Fluxor&lt;/a&gt; is a Flux implementation for Blazor in the vein of Redux. It is a state management system designed for larger software systems that encourages immutability of state, pure functions and clean separation of code. Given my fairly basic understanding of the Flux pattern I thought it would be valuable to document what it is at a high level and what&amp;rsquo;s required when using Fluxor to implement the various concepts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blazor With MVVM</title>
      <link>https://rakhama.com/posts/blazor-with-mvvm/</link>
      <pubDate>Wed, 05 Apr 2023 14:34:41 +1000</pubDate>
      
      <guid>https://rakhama.com/posts/blazor-with-mvvm/</guid>
      <description>&lt;p&gt;MVVM is a development pattern that has been around for a while now. It was designed to facilitate the development of WPF applications for Windows and is still used for the likes of &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/architecture/maui/mvvm&#34;&gt;Maui&lt;/a&gt; apps. I reckon it has a place in Blazor apps as a neat way to separate view from logic, and as a sort of volatile state management for when you don&amp;rsquo;t want state to persist between pages.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debug Server Hosted Blazor Web Assembly in VS Code</title>
      <link>https://rakhama.com/posts/debug-server-hosted-blazor-wasm/</link>
      <pubDate>Tue, 04 Apr 2023 16:20:25 +1000</pubDate>
      
      <guid>https://rakhama.com/posts/debug-server-hosted-blazor-wasm/</guid>
      <description>&lt;p&gt;A published Blazor WebAssembly instance is just a collection of files that can be loaded into a browser. If these files are hosted on the API, running the API means the UI is running as well, probably from the same address. In this case it&amp;rsquo;s a little different to debug compared to launching it standalone, but not any more complicated.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Asp.NET Self-Signed Certificates and Fedora</title>
      <link>https://rakhama.com/posts/asp-net-self-signed-certs-fedora/</link>
      <pubDate>Wed, 02 Nov 2022 16:12:24 +1000</pubDate>
      
      <guid>https://rakhama.com/posts/asp-net-self-signed-certs-fedora/</guid>
      <description>&lt;p&gt;Today I spent a bit of time fighting with certificates in an ASP.NET application I&amp;rsquo;m working on. The scenario is we have Blazor Server communicating with a Minimal API. Debugging locally I was struggling to get the two to communicate, with errors like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The remote certificate is invalid because of errors in the certificate chain: UntrustedRoot&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
